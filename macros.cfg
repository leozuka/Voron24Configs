
####################################################################################
#	Macros
####################################################################################

## Virtual SD Card                 
#[virtual_sdcard]                  
#path: ~/printer_data/gcodes
#path: ~/gcode_files                 

# Pause/Resume Functionality
[pause_resume]

[respond]

[display_status]

[auto_speed]
#axis: diag_x, diag_y  ; One or multiple of `x`, `y`, `diag_x`, `diag_y`, `z`

margin: 20            ; How far away from your axes to perform movements

#settling_home: 1      ; Perform settling home before starting Auto Speed
max_missed: 1.0       ; Maximum full steps that can be missed
endstop_samples: 3    ; How many endstop samples to take for endstop variance

accel_min: 50000     ; Minimum acceleration test may try
accel_max: 150000.0    ; Maximum acceleration test may try
accel_accu: 0.05      ; Keep binary searching until the result is within this percentage

velocity_min: 500    ; Minimum velocity test may try
velocity_max: 2000  ; Maximum velocity test may try
velocity_accu: 0.05   ; Keep binary searching until the result is within this percentage

#derate: 0.8           ; Derate discovered results by this amount

#validate_margin: Unset      ; Margin for VALIDATE, Defaults to margin
#validate_inner_margin: 20.0 ; Margin for VALIDATE inner pattern
#validate_iterations: 50     ; Perform VALIDATE pattern this many times

results_dir: ~/printer_data/config ; Destination directory for graphs

[motors_sync]
axes: x,y    #    Axes on which calibration will be performed.
accel_chip: beacon #adxl345
#    Accelerometers for vibration collection: adxl345 / mpu9250 / lis2dw,
#    etc. Are indicated general or for axis on which calibration is
#    performed, for example - accel_chip_x or accel_chip_y.
##retry_tolerance: 1000
##retries: 10
#    Maximum number of repetitions to achieve a forced threshold of motor
#    synchronization deviations.
head_fan: hotend_fan
#    Toolhead fan, which will be turned off during sync to eliminate noise.
#    This is convenient when the fan has a low temp target and is often
#    turned on, for example in thermal chamber.
##model: exponential 
##model_coeffs: 667.0597965883, 0.1421123870,1140.7911986935

[gcode_macro Homing_SETUP]
description: "QGL+Z"
gcode:

  G28
  QUAD_GANTRY_LEVEL
  G28 Z
  C_SYNC_MOTORS
  G28

[gcode_macro RESONANCE_TEST]
description: "XY Resonance testing"
gcode:

  TEST_RESONANCES AXIS=x
  TEST_RESONANCES AXIS=Y


[gcode_macro WAIT_HEATSOAK]
description: "Wait for the beacon probe to reach 70°C if the bed temp exceeds 95°C"
gcode:
    {% if printer.heater_bed.temperature > 95 %}
        M117 Waiting for probe to reach 60°C
        M118 Waiting for probe to reach 60°C
        TEMPERATURE_WAIT SENSOR="temperature_sensor beacon_coil" MINIMUM=60
        M117 Probe temperature ready
        M118 Probe temperature ready
    {% else %}
        M117 Low-temperature filament printing, skipping heat soaking.
        M118 Low-temperature filament printing, skipping heat soaking.
    {% endif %}


[gcode_macro C_SYNC_MOTORS]
gcode:
  {% if not printer.motors_sync.applied %}
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28 #X Y
    {% else %} 
    M117 Already homed. Syncing motors.
    {% endif %}
    #G28 X Y
    
    SYNC_MOTORS
    M117
    #G28 Z
  {% else %}
  M117 Motors sync already set, doing nothing.
  {% endif%}

[gcode_macro HEATSOAK]
description: "Set the bed to 100C, wait for the enclosure to reach 55C, and notify when heat soaking is complete."

gcode:
  # Set the bed temperature to 100C
  M140 S100
  M117 Heating bed to 100C

  # Wait for the bed to reach 100C
  TEMPERATURE_WAIT SENSOR="heater_bed" MINIMUM=100
  M117 Bed temperature reached 100C

  # Wait for the enclosure to reach 55C
  M117 Waiting for enclosure to reach 55C
  TEMPERATURE_WAIT SENSOR="enclosure" MINIMUM=55

  # Notify when heat soaking is complete
  M117 Heat soaking complete
  M118 Heat soaking complete



[gcode_macro BEACON_PRINT_END]
gcode:
    # reset nozzle thermal expansion offset
  {% if printer.configfile.settings.beacon is defined %}
     _BEACON_REMOVE_NOZZLE_TEMP_OFFSET
     _BEACON_SET_NOZZLE_TEMP_OFFSET RESET=True
  {% endif %}

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
gcode:
 M117 Quad gantry level
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                _QUAD_GANTRY_LEVEL RETRY_TOLERANCE=1
            {% endif %}
        _QUAD_GANTRY_LEVEL horizontal_move_z=2
        {% endif %} 


[gcode_macro FAST_QGL]
gcode:
 M117 Quad gantry level
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL RETRY_TOLERANCE=1
            {% endif %}
        QUAD_GANTRY_LEVEL horizontal_move_z=2
        {% endif %} 

#code:
#    QUAD_GANTRY_LEVEL RETRY_TOLERANCE=1
#    QUAD_GANTRY_LEVEL horizontal_move_z=2

[gcode_macro idle_led]
gcode:
    SET_LED LED=my_neopixel RED=1 BLUE=1 GREEN=1 WHITE=1.0 INDEX=1 TRANSMIT=1 SYNC=0
    SET_LED LED=my_neopixel RED=0.5 BLUE=0.0 GREEN=0.0 WHITE=0.0 INDEX=2 TRANSMIT=1 SYNC=0
    SET_LED LED=my_neopixel RED=0.5 BLUE=0.0 GREEN=0.0 WHITE=0.0 INDEX=3 TRANSMIT=1 SYNC=0

[gcode_macro active_led]
gcode:
    SET_LED LED=my_neopixel RED=1 BLUE=1 GREEN=1 WHITE=1 INDEX=1 TRANSMIT=1 SYNC=0
    SET_LED LED=my_neopixel RED=1 BLUE=1 GREEN=1 WHITE=1 INDEX=2 TRANSMIT=1 SYNC=0
    SET_LED LED=my_neopixel RED=1 BLUE=1 GREEN=1 WHITE=1 INDEX=3 TRANSMIT=1 SYNC=0

[gcode_macro SPEEDTEST]
gcode: 
    {% set fmin = params.FMIN|default(300)|float * 60 %}
    {% set fmax = params.FMAX|default(400)|float * 60 %}
    {% set steps = params.STEPS|default(3)|int %}
    {% set cycles = params.CYCLES|default(1)|int %}

    {% set inset = 20.0|float %}
    {% set maxX = printer.configfile.settings.stepper_x.position_max|float - inset %}
    {% set maxY = printer.configfile.settings.stepper_y.position_max|float - inset %}
    {% set minX = printer.configfile.settings.stepper_x.position_min|float + inset %}
    {% set minY = printer.configfile.settings.stepper_y.position_min|float + inset %}
    
    SAVE_GCODE_STATE NAME=speedtest_state
    G28
    G90
        {% for INTERVAL in range(steps) %}
            {% for REPEAT in range(cycles) %}
                {% if fmin == fmax %}
                    {% set feedrate = fmin %}
                {% else %}
                    {% set feedrate = fmin + ( (fmax - fmin) / (steps -1) ) * INTERVAL %}
                {% endif %}
                M400 # Wait for queue to empty
                M117 {INTERVAL+1}/{steps} {"%4.0f mm/s" % (feedrate/60)}
                G1 F{feedrate} # set feedrate for the round
                G1 X{minX} Y{minY} # front left
                G1 X{minX} Y{minY + (maxY-minY)/2} # mid left
                G1 X{maxX} Y{minY + (maxY-minY)/2} # mid right
                G1 X{minX} Y{minY + (maxY-minY)/2} # mid left
                G1 X{minX} Y{minY} # front left
                G1 X{maxX} Y{maxY} # back right
                G1 X{maxX} Y{minY} # front right
                G1 X{minX} Y{maxY} # back left
            {% endfor %}
        {% endfor %}
    M117
    RESTORE_GCODE_STATE NAME=speedtest_state    

[gcode_macro SMART_QGL]
gcode:
 M117 Quad gantry level
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 

# QGL if not already QGLd (only if QGL section exists in config)
 
[gcode_macro SMART_HOME]
gcode:
    {% if printer.toolhead.homed_axes == "xyz" %}
        M118 Printer is already homed
    {% else %}
        M118 Printer needs homed...
        G28 probe_method=contact calibrate=0
    {% endif %}

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E350 F{max_velocity} # fast-load
    G1 E25 F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E25 F{speed} # purge
    G1 E-420 F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(230) %}      #edit to your park position
    {% set y = params.Y|default(230) %}      #edit to your park position
    {% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(1) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{e} F2100
    G1 Z{z_safe}
    G90
    G1 X{x} Y{y} F6000 
    
[gcode_macro RESUME]#恢复打印
rename_existing: BASE_RESUME
gcode:
    ##### set defaults #####
    {% set e = params.E|default(1) %} #edit to your retract length
    G91
    G1 E{e} F2100
    G90
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME

[gcode_macro G32]#龙门架调平宏
gcode:
    STATUS_LEVELING
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G28
    G0 X150 Y150 Z30 F3600
    STATUS_READY

   

